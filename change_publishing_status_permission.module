<?php

/**
 * @file
 * A permission that controls if a user is allowed to change publishing status.
 */

/**
 * Implements hook_permission().
 */
function change_publishing_status_permission_permission() {
  return array(
    'change publishing status' => array(
      'title' => t('Change publishing status.'),
      'description' => t('If enabled, the user is allowed to change the publishing status of nodes.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * Disables and hides the submit button if permissions are insufficient for
 * publishing.
 */
function change_publishing_status_permission_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node_edit_form']) && $form['#node_edit_form']) {
    if (!user_access('change publishing status')) {
      if (isset($form['actions']['submit'])) {
        $form['actions']['submit']['#disabled'] = TRUE;
        $form['actions']['submit']['#access'] = FALSE;
      }
    }
  }
}

/**
 * Implements hook_node_presave().
 *
 * This is a failsafe if for some reason a user is able to submit a form
 * for publishing, the status of the node is set according to the user's
 * permissions.
 */
function change_publishing_status_permission_node_presave($node) {
  if (!user_access('change publishing status')) {
    $node->status = FALSE;
  }
}

/**
 * Implements hook_node_access().
 *
 * This prevents users who don't have publishing permission from editing
 * published content. This is needed as it would otherwise be possible to
 * unpublish content.
 */
function change_publishing_status_permission_node_access($node, $op, $account) {
  if ($op == 'update'
      && !user_access('change publishing status', $account)
      && $node->status == TRUE) {
    return NODE_ACCESS_DENY;
  }
}
